name: Checks

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

permissions:
  contents: read

concurrency:
  group: 'checks'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve git dependencies
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v20.4

      - name: Run
        run: |
          echo "Installing dependencies..."
          npm i
          echo "Building client..."
          npm run build
  e2e-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432

    steps:
      - name: Retrieve git dependencies
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v20.4

      - name: Build .env
        run: |
          echo "PORT=3000" >> .env
          echo "SOCKET_PORT=3001" >> .env
          echo "ENVIRONMENT=test" >> .env
          echo "DOMAIN=http://localhost:3000" >> .env
          echo "SOCKET_DOMAIN=http://localhost:3001" >> .env
          echo "TITLE=Test Server" >> .env
          echo "DATABASE_NAME=testdb" >> .env
          echo "DATABASE_USER=testuser" >> .env
          echo "DATABASE_PASSWORD=password" >> .env
          echo "DATABASE_HOST=localhost" >> .env
          echo "DATABASE_PORT=5432" >> .env
          echo "SEND_STATUS_EMAILS=false" >> .env
          echo "MINIFY=y" >> .env
          echo "BACKUP_DAYS=7" >> .env
          echo "BACKUP_INTERVAL=24" >> .env
          echo "AUTO_SIGN_IN=tsaxking" >> .env

      - name: Run
        run: |
          echo "Installing dependencies..."
          npm i
          echo "Running backend tests..."
          npm run test:e2e
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve git dependencies
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v20.4

      - name: Run
        run: |
          echo "Installing dependencies..."
          npm i
          echo "Running backend tests..."
          npm run test:backend
  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve git dependencies
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v20.4

      - name: Run
        run: |
          echo "Installing dependencies..."
          npm i
          echo "Running linter..."
          npm run lint
  formatter:
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve git dependencies
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v20.4

      - name: Run
        run: |
          echo "Installing dependencies..."
          npm i
          echo "Running formatter..."
          npm run fmt





  if-successful:
    runs-on: ubuntu-latest
    needs: [
      build, 
      e2e-tests, 
      backend-tests, 
      linter, 
      formatter,
    ]
    steps:
      - name: Retrieve git dependencies
        uses: actions/checkout@v3
        with:
            submodules: 'true'
            token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
            node-version: v20.8

      - name: Push to Deploy
        run: |
            echo "testing if on branch 'main'"
            if [ "$(git rev-parse --abbrev-ref HEAD)" != "main" ]; then
              echo "not on branch 'main', exiting"
              exit 0
            fi

            echo "Pushing changes to deploy branch..."

            echo "Good, we're on main. Pushing to deploy..."
            echo "Deleting old deploy branch"
            git branch -D deploy || true
            git push origin --delete deploy || true

            echo "Creating new deploy branch"
            git checkout --orphan deploy
            git reset --hard
            git commit --allow-empty -m "Initializing deploy branch"

            echo "Merging main into deploy"
            git merge main --strategy-option=theirs --allow-unrelated-histories -m "Merging main into gh-pages"
            git pull origin main --allow-unrelated-histories
            git add .
            git commit --allow-empty -m "Merging main into deploy"
            git push origin deploy
